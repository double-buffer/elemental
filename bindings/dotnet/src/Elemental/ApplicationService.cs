namespace Elemental;

/// <inheritdoc />
public class ApplicationService : IApplicationService
{
    /// <summary>
    /// Configures a custom log handler for processing log messages generated by the application.
    /// </summary>
    /// <param name="logHandler">The function to call when a log message is generated.</param>
    public void ConfigureLogHandler(LogHandler logHandler)
    {
        ApplicationServiceInterop.ConfigureLogHandler(logHandler);
    }

    /// <summary>
    /// Retrieves system-related information, such as platform and application path.
    /// </summary>
    /// <returns>A structure containing system information.</returns>
    public SystemInfo GetSystemInfo()
    {
        return ApplicationServiceInterop.GetSystemInfo();
    }

    /// <summary>
    /// Starts the execution of an application with specified parameters.
    /// </summary>
    /// <param name="parameters">Configuration and handlers for the application lifecycle.</param>
    /// <returns>Status code indicating success or error.</returns>
    public int RunApplication(in RunApplicationParameters parameters)
    {
        return ApplicationServiceInterop.RunApplication(parameters);
    }

    /// <summary>
    /// Exits the application, performing necessary cleanup.
    /// </summary>
    /// <param name="exitCode">Exit code of the application.</param>
    public void ExitApplication(int exitCode)
    {
        ApplicationServiceInterop.ExitApplication(exitCode);
    }

    /// <summary>
    /// Creates a window with the specified options or default settings if none are provided.
    /// </summary>
    /// <param name="options">Configuration options for the window; NULL for defaults.</param>
    /// <returns>A handle to the newly created window.</returns>
    public Window CreateWindow(in WindowOptions options = default)
    {
        return ApplicationServiceInterop.CreateWindow(options);
    }

    /// <summary>
    /// Releases resources associated with a window.
    /// </summary>
    /// <param name="window">Handle to the window to be freed.</param>
    public void FreeWindow(Window window)
    {
        ApplicationServiceInterop.FreeWindow(window);
    }

    /// <summary>
    /// Gets the render size of a window, accounting for DPI scaling.
    /// </summary>
    /// <param name="window">The window instance.</param>
    /// <returns>Render size of the window.</returns>
    public WindowSize GetWindowRenderSize(Window window)
    {
        return ApplicationServiceInterop.GetWindowRenderSize(window);
    }

    /// <summary>
    /// Sets a window's title.
    /// </summary>
    /// <param name="window">The window instance.</param>
    /// <param name="title">New title for the window.</param>
    public void SetWindowTitle(Window window, in char title)
    {
        ApplicationServiceInterop.SetWindowTitle(window, title);
    }

    /// <summary>
    /// Changes the state of a window (e.g., minimize, maximize).
    /// </summary>
    /// <param name="window">The window instance.</param>
    /// <param name="windowState">New state for the window.</param>
    public void SetWindowState(Window window, WindowState windowState)
    {
        ApplicationServiceInterop.SetWindowState(window, windowState);
    }

    /// <summary>
    /// TODO: Comments
///TODO: Make sure the coordinates are consistent accross all platforms
    /// </summary>
    public void ShowWindowCursor(Window window)
    {
        ApplicationServiceInterop.ShowWindowCursor(window);
    }

    public void HideWindowCursor(Window window)
    {
        ApplicationServiceInterop.HideWindowCursor(window);
    }

    public WindowCursorPosition GetWindowCursorPosition(Window window)
    {
        return ApplicationServiceInterop.GetWindowCursorPosition(window);
    }

}
